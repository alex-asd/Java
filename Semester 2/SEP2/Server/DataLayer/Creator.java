package Server.DataLayer;

import java.sql.*;
import java.util.List;

/**
 * Class we made to deal with the lack of support for auto-incrementing keys in the MyDatabase class.
 *
 * @author Apinayan Mohanthas
 */

final class Creator {

    private static Connection connection = null;

    /**
     * Only one thread has access to a connection at a time.
     */
    private static synchronized Connection getConnection() throws ClassNotFoundException, SQLException {
        if (connection == null || connection.isClosed()) {
            Class.forName("org.postgresql.Driver");
            return DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres",
                    "postgres", "postgres");
        } else {
            return connection;
        }
    }

    /**
     * Inserts a row into table and returns the row's auto-generated unique ID.
     *
     * @param table is the table name in the database
     * @param returnID is the ID, auto generated by the database
     * @param columns is the attributes in the database table
     * @param values are the attribute values for the new row in the database table
     * @return
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    static int create(String table, String returnID, List<String> columns, Object... values)
            throws SQLException, ClassNotFoundException {

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("INSERT INTO \"TeamTool\".");
        stringBuilder.append(table+" (");

        for (int i = 0; i < columns.size(); i++) {
            stringBuilder.append(columns.get(i));

            if (i < columns.size()-1)
                stringBuilder.append(",");
        }

        stringBuilder.append(") VALUES (");

        for (int i = 0; i < values.length; i++) {
            stringBuilder.append("?");
            if (i < values.length-1)
                stringBuilder.append(",");
        }

        stringBuilder.append(") RETURNING "+returnID+";");

        Connection connection = getConnection();

        PreparedStatement preparedStatement = connection.prepareStatement(stringBuilder.toString());

        for (int i = 0; i < values.length; i++) {
            if (values[i] instanceof Integer) {
                preparedStatement.setInt((i+1), (int) values[i]);
            } else if (values[i] instanceof String) {
                preparedStatement.setString((i+1), (String) values[i]);
            } else if (values[i] instanceof Timestamp) {
                preparedStatement.setTimestamp((i+1), (Timestamp) values[i]);
            }
        }

        ResultSet resultSet = preparedStatement.executeQuery();

        int newID = -1;

        if (resultSet.next())
            newID = resultSet.getInt(1);

        preparedStatement.close();
        resultSet.close();
        connection.close();
        return newID;

    }
}
